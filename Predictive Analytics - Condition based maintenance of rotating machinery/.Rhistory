# Raw data imported from local machine#
# checking obesrvations ~
View(data)
# Raw data imported from local machine#
# checking obesrvations ~
read.delim("data.txt")
# Raw data imported from local machine#
# checking obesrvations ~
read.delim(data.txt)
# Raw data imported from local machine#
# checking obesrvations ~
read.delim("data.txt")
getwd()
setwd("C:/Users/mkart/OneDrive/Documents/Projects/CBM/CBM")
View(data)
read.delim("data.txt")
data<-read.delim("data.txt")
View(data)
getwd()
setwd("C:/Users/mkart/OneDrive/Documents/Projects/CBM/CBM")
data<-read.delim("data.txt")
View(data)
summary (data)
nrow(data)
ncol(data)
dim(data)
str(data)
#Colanames replace and checking null/na obeservations)#
cbm<-data.frame(data)
sum(is.na(cbm))
sum(is.null(cbm))
colnames(cbm)<-c("Lever position (lp)",
"Ship speed (v) [knots]",
"Gas Turbine (GT) shaft torque (GTT) [kN m]",
"GT rate of revolutions (GTn) [rpm]",
"Gas Generator rate of revolutions (GGn) [rpm]",
"Starboard Propeller Torque (Ts) [kN]",
"Port Propeller Torque (Tp) [kN]",
"Hight Pressure (HP) Turbine exit temperature (T48) [C]",
"GT Compressor inlet air temperature (T1) [C]",
"GT Compressor outlet air temperature (T2) [C]",
"HP Turbine exit pressure (P48) [bar]",
"GT Compressor inlet air pressure (P1) [bar]",
"GT Compressor outlet air pressure (P2) [bar]",
"GT exhaust gas pressure (Pexh) [bar]",
"Turbine Injecton Control (TIC) [%]",
"Fuel flow (mf) [kg/s]",
"GT Compressor decay state coefficient",
"GT Turbine decay state coefficient")
# Scaling the data#
View(cbm)
# Raw data imported from local machine#
# checking obesrvations ~
getwd()
setwd("C:/Users/mkart/OneDrive/Documents/Projects/CBM/CBM")
data<-read.delim("data.txt")
View(data)
summary (data)
nrow(data)
ncol(data)
dim(data)
str(data)
#Colanames replace and checking null/na obeservations)#
cbm<-data.frame(data)
sum(is.na(cbm))
sum(is.null(cbm))
colnames(cbm)<-c("Lever position (lp)",
"Ship speed (v) [knots]",
"Gas Turbine (GT) shaft torque (GTT) [kN m]",
"GT rate of revolutions (GTn) [rpm]",
"Gas Generator rate of revolutions (GGn) [rpm]",
"Starboard Propeller Torque (Ts) [kN]",
"Port Propeller Torque (Tp) [kN]",
"Hight Pressure (HP) Turbine exit temperature (T48) [C]",
"GT Compressor inlet air temperature (T1) [C]",
"GT Compressor outlet air temperature (T2) [C]",
"HP Turbine exit pressure (P48) [bar]",
"GT Compressor inlet air pressure (P1) [bar]",
"GT Compressor outlet air pressure (P2) [bar]",
"GT exhaust gas pressure (Pexh) [bar]",
"Turbine Injecton Control (TIC) [%]",
"Fuel flow (mf) [kg/s]",
"GT Compressor decay state coefficient",
"GT Turbine decay state coefficient")
# Scaling the data#
View(cbm)
head(cbm,10)
cbm[,12]
hist(cbm[,12],density = F,freq = F,)
#EDA#
write.csv(cbm,"cbm.csv")
library(corrplot)
install.packages("corrplot")
cbmcorplot<-cor(cbm)
corrplot(cbmcorplot,method = "circle")
install.packages("corrplot")
# Raw data imported from local machine#
# checking obesrvations ~
getwd()
setwd("C:/Users/mkart/OneDrive/Documents/Projects/CBM/CBM")
data<-read.delim("data.txt")
View(data)
summary (data)
nrow(data)
ncol(data)
dim(data)
str(data)
#Colanames replace and checking null/na obeservations)#
cbm<-data.frame(data)
sum(is.na(cbm))
sum(is.null(cbm))
colnames(cbm)<-c("Lever position (lp)",
"Ship speed (v) [knots]",
"Gas Turbine (GT) shaft torque (GTT) [kN m]",
"GT rate of revolutions (GTn) [rpm]",
"Gas Generator rate of revolutions (GGn) [rpm]",
"Starboard Propeller Torque (Ts) [kN]",
"Port Propeller Torque (Tp) [kN]",
"Hight Pressure (HP) Turbine exit temperature (T48) [C]",
"GT Compressor inlet air temperature (T1) [C]",
"GT Compressor outlet air temperature (T2) [C]",
"HP Turbine exit pressure (P48) [bar]",
"GT Compressor inlet air pressure (P1) [bar]",
"GT Compressor outlet air pressure (P2) [bar]",
"GT exhaust gas pressure (Pexh) [bar]",
"Turbine Injecton Control (TIC) [%]",
"Fuel flow (mf) [kg/s]",
"GT Compressor decay state coefficient",
"GT Turbine decay state coefficient")
# Scaling the data#
View(cbm)
data1 <-read.delim(data, header = FALSE, sep = " ", quote = "\"",
dec = ".", fill = TRUE, comment.char = "",stringsAsFactors= T)
dec = ".", fill = TRUE, comment.char = "",stringsAsFactors= T")
data1 <-read.delim(data.txt, header = FALSE, sep = " ", quote = "\"",
dec = ".", fill = TRUE, comment.char = "",stringsAsFactors= T)
data1 <-read.delim("data.txt", header = FALSE, sep = " ", quote = "\"",
dec = ".", fill = TRUE, comment.char = "",stringsAsFactors= T)
view(data1)
data1 <-read.delim("data.txt", header = FALSE, sep = " ", quote = "\"",
dec = ".", fill = TRUE, comment.char = "",stringsAsFactors= T)
view(data1)
View(data1)
data1 <-read.delim("data.txt", header = FALSE, sep = " ", quote = "\"",
dec = ".", fill = TRUE,,stringsAsFactors= T)
View(data1)
data1 <-read.delim("data.txt", header = FALSE, sep = " ", quote = "\"",
dec = ".", fill = F,stringsAsFactors= T)
View(data1)
data1 <-read.delim("data.txt", header = FALSE, sep = "\t", quote = "\"",
dec = ".", fill = F,stringsAsFactors= T)
View(data1)
data1 <-read.delim("data.txt", header = FALSE, sep = "", quote = "\"",
dec = ".", fill = F,stringsAsFactors= T)
View(data1)
data <-read.delim("data.txt", header = FALSE, sep = "", quote = "\"",
dec = ".", fill = F,stringsAsFactors= T)
View(data)
# Raw data imported from local machine#
# checking obesrvations ~
getwd()
setwd("C:/Users/mkart/OneDrive/Documents/Projects/CBM/CBM")
data <-read.delim("data.txt", header = FALSE, sep = "", quote = "\"",
dec = ".", fill = F,stringsAsFactors= T)
View(data)
summary (data)
nrow(data)
ncol(data)
dim(data)
str(data)
#Colanames replace and checking null/na obeservations)#
cbm<-data.frame(data)
sum(is.na(cbm))
sum(is.null(cbm))
colnames(cbm)<-c("Lever position (lp)",
"Ship speed (v) [knots]",
"Gas Turbine (GT) shaft torque (GTT) [kN m]",
"GT rate of revolutions (GTn) [rpm]",
"Gas Generator rate of revolutions (GGn) [rpm]",
"Starboard Propeller Torque (Ts) [kN]",
"Port Propeller Torque (Tp) [kN]",
"Hight Pressure (HP) Turbine exit temperature (T48) [C]",
"GT Compressor inlet air temperature (T1) [C]",
"GT Compressor outlet air temperature (T2) [C]",
"HP Turbine exit pressure (P48) [bar]",
"GT Compressor inlet air pressure (P1) [bar]",
"GT Compressor outlet air pressure (P2) [bar]",
"GT exhaust gas pressure (Pexh) [bar]",
"Turbine Injecton Control (TIC) [%]",
"Fuel flow (mf) [kg/s]",
"GT Compressor decay state coefficient",
"GT Turbine decay state coefficient")
# Scaling the data#
View(cbm)
head(cbm,10)
cbm[,12]
hist(cbm[,12],density = F,freq = F,)
#EDA#
write.csv(cbm,"cbm.csv")
library(corrplot)
install.packages("corrplot")
cbmcorplot<-cor(cbm)
corrplot(cbmcorplot,method = "circle")
install.packages("corrplot")
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd("C:/Users/mkart/OneDrive/Documents/Projects/ProcessingBigData/CBM/CBM")
data <-read.delim("data.txt", header = FALSE, sep = "", quote = "\"",
dec = ".", fill = F,stringsAsFactors= T)
cbm<-data.frame(data)
head(cbm,10)
colnames(cbm)<-c("Lever position (lp)",
"Ship speed (v) [knots]",
"Gas Turbine (GT) shaft torque (GTT) [kN m]",
"GT rate of revolutions (GTn) [rpm]",
"Gas Generator rate of revolutions (GGn) [rpm]",
"Starboard Propeller Torque (Ts) [kN]",
"Port Propeller Torque (Tp) [kN]",
"Hight Pressure (HP) Turbine exit temperature (T48) [C]",
"GT Compressor inlet air temperature (T1) [C]",
"GT Compressor outlet air temperature (T2) [C]",
"HP Turbine exit pressure (P48) [bar]",
"GT Compressor inlet air pressure (P1) [bar]",
"GT Compressor outlet air pressure (P2) [bar]",
"GT exhaust gas pressure (Pexh) [bar]",
"Turbine Injecton Control (TIC) [%]",
"Fuel flow (mf) [kg/s]",
"GT Compressor decay state coefficient",
"GT_Turbine_decay_state_coefficient")
tail(cbm,10)
str(cbm)
dim(cbm)
summary(cbm)
sum(is.na(cbm))
sum(is.null(cbm))
par(mfrow=c(1,1),bg="lightyellow")
library(corrplot)
cbmcorplot<-cor(cbm)
corrplot(cbmcorplot,method = "circle",type="lower")
var(cbm$`GT Compressor inlet air temperature (T1) [C]`)
var(cbm$`GT Compressor inlet air pressure (P1) [bar]`)
sum(cbm$`Starboard Propeller Torque (Ts) [kN]`-cbm$`Port Propeller Torque (Tp) [kN]`)
par(mfrow=c(1,1),bg="lightyellow")
boxplot(cbm$`Lever position (lp)`)
boxplot(cbm$`Ship speed (v) [knots]`)
boxplot(cbm$`Gas Turbine (GT) shaft torque (GTT) [kN m]`)
boxplot(cbm$`GT rate of revolutions (GTn) [rpm]`)
boxplot(cbm$`Gas Generator rate of revolutions (GGn) [rpm]`)
boxplot(cbm$`Starboard Propeller Torque (Ts) [kN]`)
boxplot(cbm$`Port Propeller Torque (Tp) [kN]`)
boxplot(cbm$`Hight Pressure (HP) Turbine exit temperature (T48) [C]`)
boxplot(cbm$`GT Compressor inlet air temperature (T1) [C]`)
boxplot(cbm$`GT Compressor outlet air temperature (T2) [C]`)
boxplot(cbm$`HP Turbine exit pressure (P48) [bar]`)
boxplot(cbm$`GT Compressor inlet air pressure (P1) [bar]`)
boxplot(cbm$`GT Compressor outlet air pressure (P2) [bar]`)
boxplot(cbm$`GT exhaust gas pressure (Pexh) [bar]`)
boxplot(cbm$`Turbine Injecton Control (TIC) [%]`)
boxplot(cbm$`Fuel flow (mf) [kg/s]`)
boxplot(cbm$`GT Compressor decay state coefficient`)
boxplot(cbm$`GT_Turbine_decay_state_coefficient`)
par(mfrow=c(1,1),bg="lightyellow")
#Function for replace outliers
replace_outliers = function(x,na.rm= TRUE){
qnt = quantile(x, probs = c(.25,.75))
outlier = 1.5*IQR(x)
x[x < (qnt[1]-outlier) ] <- qnt[1]
x[x > (qnt[2]+outlier) ] <- qnt[2]
return(x)
}
cbm$`Turbine Injecton Control (TIC) [%]`<-replace_outliers(cbm$`Turbine Injecton Control (TIC) [%]`)
boxplot(cbm$`Turbine Injecton Control (TIC) [%]`)
par(mfrow=c(3,3),bg="lightyellow")
for (i in 1:ncol(cbm)) {
d<-density(cbm[,i])
plot(d)
}
cbmu<-cbm[,-c(7,9,12,17)]
colnames(cbmu)
set.seed(1234)
ids = sample(nrow(cbmu), nrow(cbmu)*0.6)
train<-data.frame(cbmu[ids,])
test<-data.frame(cbmu[-ids,])
train_withou_Y<-train[,-c(14)]
test_withou_Y<-test[,-c(14)]
train_zscale<-data.frame(scale(train_withou_Y))
test_zscale<-data.frame(scale(test_withou_Y))
head(train_zscale)
head(test_zscale)
minmax<-function(x){
return((x-min(x))/max(x)-min(x))
}
train_minmax<-data.frame(minmax(train_withou_Y))
test_minmax<-data.frame(minmax(test_withou_Y))
Y_train<-train$GT_Turbine_decay_state_coefficient
Y_test<-test$GT_Turbine_decay_state_coefficient
train_zscale_withY<-cbind(train_zscale[,],Y_train)
train_minmax_withY<-cbind(train_minmax[,],Y_train)
test_zscale_withY<-cbind(test_zscale[,],Y_test)
test_minmax_withY<-cbind(test_minmax[,],Y_test)
lmode_z<-lm (Y_train~.,data=train_zscale_withY)
lmode_minmax<-lm (Y_train~.,data=train_minmax_withY)
summary(lmode_z)
summary(lmode_minmax)
lmode_z$coefficients
lmode_z_predictions<-predict(lmode_z, newdata=test_zscale_withY)
lmode_minmax_predictions<-predict(lmode_minmax, newdata=test_minmax_withY)
rmse<-function(x){
testerror<- (Y_test-x)
testerror_sq <- testerror ** 2
rmse<-sqrt(mean(testerror_sq))
rmse
}
rmse(lmode_z_predictions)
rmse(lmode_minmax_predictions)
par(mfrow=c(1,1),bg="lightyellow")
require(glmnet)
library(glmnet)
x_reg<-data.matrix(train_withou_Y)
y_reg<-Y_train
lambda_seq <- 10^seq(2, -2, by = -.1)
ridge_model <- glmnet(x_reg, y_reg, alpha = 0, lambda  = lambda_seq,standardize = FALSE)
summary(ridge_model)
plot(ridge_model, xvar = "lambda")
legend("bottomright", lwd = 1, col = 1:6, legend = colnames(x_reg), cex = .45)
par(mfrow=c(1,1),bg="lightyellow")
lambdas_to_try <- 10^seq(-3, 3, length.out = 50)
ridge_cv <- cv.glmnet(x_reg, y_reg, alpha = 0,lambda = lambdas_to_try ,nfolds = 100)
best_lambda<-ridge_cv$lambda.min
best_lambda
plot(ridge_cv)
x_reg<-data.matrix(train_withou_Y)
y_reg<-Y_train
lambda_seq <- 10^seq(2, -2, by = -.1)
final_ridge_model <- glmnet(x_reg, y_reg, alpha = 0, lambda  = best_lambda ,standardize = FALSE)
coef(final_ridge_model)
y_predicted <- predict(final_ridge_model , s = best_lambda, newx = data.matrix(test_withou_Y))
rmse(y_predicted)
par(mfrow=c(1,1),bg="lightyellow")
require(glmnet)
library(glmnet)
x_reg<-data.matrix(train_withou_Y)
y_reg<-Y_train
lambda_seq <- 10^seq(1, -3, by = -.1)
lasso_model <- glmnet(x_reg, y_reg, alpha = 1, lambda  = lambda_seq,standardize = FALSE)
summary(lasso_model)
plot(lasso_model, xvar = "lambda")
legend("bottomright", lwd = 1, col = 1:6, legend = colnames(x_reg), cex = .45)
par(mfrow=c(1,1),bg="lightyellow")
set.seed(12345)
lambdas_to_try <- 10^seq(-6, 1, length.out = 50)
lasso_cv <- cv.glmnet(x_reg, y_reg, alpha = 1,lambda = lambdas_to_try ,nfolds = 100)
best_lambda_lasso<-ridge_cv$lambda.min
best_lambda_lasso
plot(lasso_cv )
set.seed(12345)
x_reg<-data.matrix(train_withou_Y)
y_reg<-Y_train
final_lasso_model <- glmnet(x_reg, y_reg, alpha = 1, lambda  = best_lambda_lasso ,standardize = FALSE)
coef(final_lasso_model)
set.seed(12345)
y_predicted_lasso <- predict(final_lasso_model , s = best_lambda_lasso, newx = data.matrix(test_withou_Y))
rmse(y_predicted_lasso)
